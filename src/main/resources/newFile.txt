Общее Описание

Для начала немного общей теории. Вспомним, в общих чертах, как работает Garbage Collector (далее GC).
Если не вдаваться в детали, то алгоритм прост: при запуске сборщика виртуальная машина рекурсивно находит,
для всех потоков, все доступные объекты в памяти и помечает их неким образом. А на следующем шаге GC удаляет
из памяти все непомеченные объекты. Таким образом, после чистки, в памяти будут находиться только те объекты,
которые могут быть полезны программе. Идем дальше.
В Java есть несколько видов ссылок. Есть StrongReference — это самые обычные ссылки которые мы создаем каждый день.
	StringBuilder builder = new StringBuilder();
builder это и есть strong-ссылка на объект StringBuilder.
И есть 3 «особых» типа ссылок — SoftReference, WeakReference, PhantomReference. По сути, различие между всеми
типами ссылок только одно — поведение GC с объектами, на которые они ссылаются. Мы более детально обсудим
особенности каждого типа ссылок позже, а пока достаточно будет следующих знаний:
SoftReference — если GC видит что объект доступен только через цепочку soft-ссылок, то он удалит его из памяти.
Потом. Наверно.
WeakReference — если GC видит что объект доступен только через цепочку weak-ссылок, то он удалит его из памяти.
PhantomReference — если GC видит что объект доступен только через цепочку phantom-ссылок, то он его удалит из
памяти. После нескольких запусков GC.
Если пока не понятно в чем же разница, то не переживайте, скоро все станет на свои места. Мелочи в деталях, а
детали будут дальше.
